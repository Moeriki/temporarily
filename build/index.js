"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.cleanup = cleanup;
exports.filepath = filepath;
exports.dir = dir;
exports.file = file;

var _fs = _interopRequireDefault(require("fs"));

var _os = _interopRequireDefault(require("os"));

var _path = _interopRequireDefault(require("path"));

var _cryptoRandomString = _interopRequireDefault(require("crypto-random-string"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

// constants
var EMPTY_STRING = '';
var DEFAULT_DIR_MODE = 0o777;
var DEFAULT_ENCODING = 'utf8';
var DEFAULT_FILE_MODE = 0o666;
var DEFAULT_NAME = 'temporarily-{WWWWDDDD}';
var TMP_DIR = 'temporarily-{XXXXXXXX}';
var DIGIT = '1234567890';
var WORD = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ';
var TEMPLATE_INTERPOLATE = /\{([^}]+)\}/g; // utils

var sample = function sample(array) {
  return array[Math.floor(Math.random() * array.length)];
}; // private


var templateChars = {
  /* eslint-disable id-length */
  d: function d() {
    return sample(DIGIT);
  },
  w: function w() {
    return sample(WORD);
  },
  x: function x() {
    return (0, _cryptoRandomString.default)(1);
  }
  /* eslint-enable id-length */

};
var tempXCallbacks = []; // const debug = (...args) => {
//   console.log(...args);
// };

var moveTo = function moveTo(toTempDir) {
  var move = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;
  return function (fromTemp) {
    /* eslint-disable no-param-reassign */
    var newFilepath = _path.default.join(toTempDir.filepath, _path.default.basename(fromTemp.filepath));

    if (move) {
      _fs.default.renameSync(fromTemp.filepath, newFilepath); // debug('MOVED', fromTemp.filepath, newFilepath);

    }

    fromTemp.filepath = newFilepath;

    if (fromTemp.children) {
      fromTemp.children = fromTemp.children.map(moveTo(fromTemp, false));
    }

    return fromTemp;
  };
};

var templateReplacer = function templateReplacer(match, innerMatch) {
  return innerMatch.split(EMPTY_STRING).map(function (char) {
    var chars = templateChars[char.toLowerCase()];

    if (!chars) {
      throw new Error(`Expected template placeholder to be one of: ${Object.keys(templateChars).join(', ')}. Received ${char}`);
    }

    return chars();
  }).join(EMPTY_STRING);
};

var tmpDir = function tmpDir() {
  return _path.default.join(_os.default.tmpdir(), TMP_DIR.replace(TEMPLATE_INTERPOLATE, templateReplacer));
}; // exports


function registerCleanup(fn) {
  tempXCallbacks.push(fn);
  return function manualCleanupOne() {
    fn();
    tempXCallbacks = tempXCallbacks.filter(function (callback) {
      return callback !== fn;
    });
  };
}
/** */


function cleanup() {
  tempXCallbacks.forEach(function (fn) {
    fn();
  });
  tempXCallbacks.length = 0;
}
/**
 * @param {object} [options]
 * @param {string} [options.dir=os.tmpdir]
 * @param {string} [options.ext]
 * @param {string} [options.name=temporarily-{WWWWDDDD}]
 * @return {string} filepath
 */


function filepath() {
  var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},
      _ref$dir = _ref.dir,
      dirPath = _ref$dir === void 0 ? tmpDir() : _ref$dir,
      _ref$ext = _ref.ext,
      ext = _ref$ext === void 0 ? null : _ref$ext,
      _ref$name = _ref.name,
      name = _ref$name === void 0 ? DEFAULT_NAME : _ref$name;

  var dirname = _path.default.resolve(dirPath);

  var basename = name.replace(TEMPLATE_INTERPOLATE, templateReplacer);
  return _path.default.join(dirname, `${basename}${ext ? `.${ext}` : ''}`);
}
/**
 * @param {object}        [options]
 * @param {number}        [options.mode=0o777]
 * @param {Array<object>} [children]
 * @return {object} dir props
 */


function dir() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var children = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (Array.isArray(options)) {
    /* eslint-disable no-param-reassign */
    children = options;
    options = {};
    /* eslint-enable no-param-reassign */
  }

  var _options = options,
      _options$mode = _options.mode,
      mode = _options$mode === void 0 ? DEFAULT_DIR_MODE : _options$mode;
  var tempDir = {
    filepath: filepath(options),
    isDir: true,
    mode
  };

  try {
    _fs.default.accessSync(tempDir.filepath, _fs.default.F_OK);
  } catch (err) {
    if (err.code !== 'ENOENT') {
      throw new Error(`Could not check ${tempDir.filepath}.`);
    }

    tempDir.cleanup = registerCleanup(function () {
      _fs.default.rmdirSync(tempDir.filepath);
    });

    var parentDir = _path.default.dirname(tempDir.filepath);

    dir({
      dir: _path.default.dirname(parentDir),
      name: _path.default.basename(parentDir)
    });

    _fs.default.mkdirSync(tempDir.filepath, mode); // debug('CREATED DIR', tempDir.filepath);

  }

  if (children.length !== 0) {
    tempDir.children = children.map(moveTo(tempDir));
  }

  return tempDir;
}
/**
 * @param {object} [options]
 * @param {string} [options.data='']
 * @param {string} [options.encoding=utf8]
 * @param {number} [options.mode=0o666]
 * @return {object} file props
 */


function file() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var _options$data = options.data,
      data = _options$data === void 0 ? '' : _options$data,
      _options$encoding = options.encoding,
      encoding = _options$encoding === void 0 ? DEFAULT_ENCODING : _options$encoding,
      _options$mode2 = options.mode,
      mode = _options$mode2 === void 0 ? DEFAULT_FILE_MODE : _options$mode2;
  var tempFile = {
    data,
    filepath: filepath(options),
    isFile: true,
    mode
  };

  var parentDir = _path.default.dirname(tempFile.filepath);

  tempFile.cleanup = registerCleanup(function () {
    _fs.default.unlinkSync(tempFile.filepath);
  });

  try {
    _fs.default.accessSync(parentDir, _fs.default.F_OK);
  } catch (err) {
    if (err.code !== 'ENOENT') {
      throw new Error(`Could not check ${parentDir}.`);
    }

    dir({
      dir: _path.default.dirname(parentDir),
      name: _path.default.basename(parentDir)
    });
  }

  _fs.default.writeFileSync(tempFile.filepath, data, {
    encoding,
    mode
  }); // debug('CREATED FILE', tempFile.filepath);


  return tempFile;
} // auto clean up


process.on('exit', cleanup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,